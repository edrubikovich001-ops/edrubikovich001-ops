import os
import re
from aiogram import Bot, Dispatcher, Router, F
from aiogram.filters import CommandStart
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup, KeyboardButton,
)

# === –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN env is not set")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
MAIN_KB = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üÜï –ò–Ω—Ü–∏–¥–µ–Ω—Ç")],
        [KeyboardButton(text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å")],
        [KeyboardButton(text="üìä –û—Ç—á—ë—Ç")],
    ],
    resize_keyboard=True,
)

def _norm(text: str) -> str:
    """
    –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—Å—Ç: –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä, —É–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏/–∑–Ω–∞–∫–∏,
    —á—Ç–æ–±—ã —Ö—ç–Ω–¥–ª–µ—Ä—ã —Å—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –∏ —Å —ç–º–æ–¥–∑–∏, –∏ –±–µ–∑.
    """
    if not text:
        return ""
    t = text.lower()
    # —É–¥–∞–ª–∏–º –≤—Å—ë –∫—Ä–æ–º–µ –±—É–∫–≤/—Ü–∏—Ñ—Ä/–ø—Ä–æ–±–µ–ª–æ–≤ (—É–ø—Ä–æ—Å—Ç–∏–º)
    t = re.sub(r"[^\w\s—ë–Å–∞-—èa-z0-9]", "", t, flags=re.IGNORECASE)
    # —Å–≤–æ–¥–∏–º —ë -> –µ
    t = t.replace("—ë", "–µ")
    return t.strip()

# === –•—ç–Ω–¥–ª–µ—Ä—ã ===

@router.message(CommandStart())
async def start_cmd(msg: Message):
    await msg.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —É—á—ë—Ç–∞ –ø–æ—Ç–µ—Ä—å –ø—Ä–æ–¥–∞–∂.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ.",
        reply_markup=MAIN_KB
    )

@router.message(F.text)
async def main_menu_handler(msg: Message):
    t = _norm(msg.text)

    # –ª–æ–≤–∏–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å/–±–µ–∑ —ç–º–æ–¥–∑–∏, –≤ –ª—é–±–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
    if "–∏–Ω—Ü–∏–¥–µ–Ω—Ç" in t:
        await msg.answer("–û–∫–µ–π, –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞‚Ä¶ (–∑–∞–≥–ª—É—à–∫–∞)")
        return

    if "–∑–∞–∫—Ä—ã—Ç—å" in t or "–∑–∞–∫—Ä—ã—Ç–∏–µ" in t:
        await msg.answer("–û—Ç–∫—Ä—ã—Ç—ã–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è‚Ä¶ (–∑–∞–≥–ª—É—à–∫–∞)")
        return

    if "–æ—Ç—á–µ—Ç" in t or "–æ—Ç—á—ë—Ç" in t:
        await msg.answer("–ö–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –æ—Ç—á—ë—Ç–∞ –≤—ã–±—Ä–∞—Ç—å? (–∑–∞–≥–ª—É—à–∫–∞)")
        return

    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ ‚Äî –º—è–≥–∫–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞
    await msg.answer(
        "–Ø –Ω–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ù–∞–∂–º–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.",
        reply_markup=MAIN_KB
    )

# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞ ===
dp.include_router(router)

# === –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ server.py (uvicorn) ===
# –ù–∏—á–µ–≥–æ –∑–¥–µ—Å—å –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º ‚Äî –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å—Ç–∞—Ä—Ç—É–µ—Ç –∏–∑ server.py
