# bot.py ‚Äî Aiogram v3: –±–∞–∑–æ–≤–æ–µ –º–µ–Ω—é –∏ —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Å —ç–º–æ–¥–∑–∏
from __future__ import annotations

import re
import logging
from aiogram import Router, F, types
from aiogram.filters import CommandStart
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

router = Router(name="main")

# ‚Äî‚Äî‚Äî –ö—Ä–∞—Å–∏–≤—ã–µ –∫–Ω–æ–ø–∫–∏ (—Å —ç–º–æ–¥–∑–∏) ‚Äî‚Äî‚Äî
BTN_INCIDENT_ICON = "üÜï"
BTN_CLOSE_ICON    = "‚úÖ"
BTN_REPORT_ICON   = "üìä"

BTN_INCIDENT = f"{BTN_INCIDENT_ICON} –ò–Ω—Ü–∏–¥–µ–Ω—Ç"
BTN_CLOSE    = f"{BTN_CLOSE_ICON} –ó–∞–∫—Ä—ã—Ç—å"
BTN_REPORT   = f"{BTN_REPORT_ICON} –û—Ç—á—ë—Ç"

def main_menu() -> ReplyKeyboardMarkup:
    kb = [
        [KeyboardButton(text=BTN_INCIDENT)],
        [KeyboardButton(text=BTN_CLOSE)],
        [KeyboardButton(text=BTN_REPORT)],
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

# ‚Äî‚Äî‚Äî –†–µ–≥—É–ª—è—Ä–∫–∏: –ª–æ–≤–∏–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å —ç–º–æ–¥–∑–∏/–±–µ–∑ –∏ ¬´–û—Ç—á–µ—Ç/–û—Ç—á—ë—Ç¬ª ‚Äî‚Äî‚Äî
INCIDENT_RX = re.compile(r"–ò–Ω—Ü–∏–¥–µ–Ω—Ç", re.IGNORECASE)
CLOSE_RX    = re.compile(r"–ó–∞–∫—Ä—ã—Ç—å", re.IGNORECASE)
REPORT_RX   = re.compile(r"–û—Ç—á[–µ—ë]—Ç", re.IGNORECASE)

@router.message(CommandStart())
async def on_start(message: types.Message):
    logging.info("Start from %s (%s)", message.from_user.id, message.from_user.full_name)
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —É—á—ë—Ç–∞ –ø–æ—Ç–µ—Ä—å –ø—Ä–æ–¥–∞–∂.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ.",
        reply_markup=main_menu(),
    )

@router.message(F.text.regexp(INCIDENT_RX))
async def on_incident(message: types.Message):
    logging.info("Incident click: %r", message.text)
    # –ó–¥–µ—Å—å –ø–æ–∑–∂–µ –¥–æ–±–∞–≤–∏–º —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞; –ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
    await message.answer("–û–∫–µ–π, –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞‚Ä¶ (–∑–∞–≥–ª—É—à–∫–∞)")

@router.message(F.text.regexp(CLOSE_RX))
async def on_close(message: types.Message):
    logging.info("Close click: %r", message.text)
    await message.answer("–ó–∞–∫—Ä—ã—Ç–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞‚Ä¶ (–∑–∞–≥–ª—É—à–∫–∞)")

@router.message(F.text.regexp(REPORT_RX))
async def on_report(message: types.Message):
    logging.info("Report click: %r", message.text)
    await message.answer("–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞‚Ä¶ (–∑–∞–≥–ª—É—à–∫–∞)")

# –§–æ–ª–ª–±–µ–∫: –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç ‚Äî –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ –∫–Ω–æ–ø–∫–∏
@router.message(F.text)
async def fallback(message: types.Message):
    logging.info("Text (no match): %r", message.text)
    await message.answer("–ù–µ –ø–æ–Ω—è–ª. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá", reply_markup=main_menu())
