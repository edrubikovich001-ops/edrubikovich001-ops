# bot.py
from __future__ import annotations
import os
import datetime as dt
from typing import Optional

from aiogram import Router, F
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton
)
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

import pytz

import db

router = Router()

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã/–∏–∫–æ–Ω–∫–∏ ---
BTN_INCIDENT = "üÜï –ò–Ω—Ü–∏–¥–µ–Ω—Ç"
BTN_CLOSE    = "‚úÖ –ó–∞–∫—Ä—ã—Ç—å"
BTN_REPORT   = "üìä –û—Ç—á—ë—Ç"

REASONS = [
    ("üåß –í–Ω–µ—à–Ω–∏–µ –ø–æ—Ç–µ—Ä–∏", "external"),
    ("üè† –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø–æ—Ç–µ—Ä–∏", "internal"),
    ("üë• –ù–µ—Ö–≤–∞—Ç–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞", "staff_shortage"),
    ("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞", "no_product"),
]

AMOUNTS = ["10000", "25000", "50000", "100000", "250000", "500000", "1000000", "–î—Ä—É–≥–∞—è"]

TZ = os.getenv("TZ", "Asia/Almaty")
tz = pytz.timezone(TZ)

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (ReplyKeyboard) ---
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text=BTN_INCIDENT)],
        [KeyboardButton(text=BTN_CLOSE)],
        [KeyboardButton(text=BTN_REPORT)],
    ],
    resize_keyboard=True,
)

# --- FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
class IncidentFSM(StatesGroup):
    manager = State()
    restaurant = State()
    day = State()
    start_hour = State()
    start_minute = State()
    end_choice = State()       # —Å–µ–π—á–∞—Å –∏–ª–∏ –ø–æ–∑–∂–µ
    end_hour = State()
    end_minute = State()
    reason = State()
    comment = State()
    amount = State()
    confirm = State()

class CloseLaterFSM(StatesGroup):
    pick_incident = State()
    day = State()
    end_hour = State()
    end_minute = State()
    confirm = State()

def kb_back_next(back_cb: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=back_cb)]]
    )

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def kb_list(items: list[tuple[str, str]], back: Optional[str]=None) -> InlineKeyboardMarkup:
    rows = [[InlineKeyboardButton(text=t, callback_data=cb)] for t, cb in items]
    if back:
        rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=back)])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def kb_days() -> InlineKeyboardMarkup:
    today = dt.datetime.now(tz).date()
    buttons = []
    buttons.append(("üìÖ –°–µ–≥–æ–¥–Ω—è", f"day:{today.isoformat()}"))
    buttons.append(("üìÖ –í—á–µ—Ä–∞", f"day:{(today - dt.timedelta(days=1)).isoformat()}"))
    for n in range(2, 8):
        d = today - dt.timedelta(days=n)
        buttons.append((d.strftime("üìÖ %a %d.%m"), f"day:{d.isoformat()}"))
    return kb_list(buttons, back="back:restaurant")

def kb_hours(next_cb_prefix: str, back: str) -> InlineKeyboardMarkup:
    rows=[]
    for h in range(0,24,6):
        row=[]
        for j in range(h, h+6):
            row.append(InlineKeyboardButton(text=f"{j:02d}", callback_data=f"{next_cb_prefix}:{j:02d}"))
        rows.append(row)
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=back)])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def kb_minutes(next_cb_prefix: str, back: str) -> InlineKeyboardMarkup:
    mins = ["00","15","30","45"]
    row = [InlineKeyboardButton(text=m, callback_data=f"{next_cb_prefix}:{m}") for m in mins]
    return InlineKeyboardMarkup(inline_keyboard=[row, [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=back)]])

def kb_end_choice() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ö° –ó–∞–∫—Ä—ã—Ç—å —Å–µ–π—á–∞—Å", callback_data="end:now")],
            [InlineKeyboardButton(text="‚è≥ –ó–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∂–µ", callback_data="end:later")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back:start_minute")],
        ]
    )

def kb_reasons() -> InlineKeyboardMarkup:
    rows=[[InlineKeyboardButton(text=label, callback_data=f"reason:{val}")] for label,val in REASONS]
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back:end_choice")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def kb_amounts() -> InlineKeyboardMarkup:
    row1 = [InlineKeyboardButton(text=a, callback_data=f"amount:{a}") for a in AMOUNTS[:4]]
    row2 = [InlineKeyboardButton(text=a, callback_data=f"amount:{a}") for a in AMOUNTS[4:8]]
    return InlineKeyboardMarkup(inline_keyboard=[row1,row2,[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back:reason")]])

def kb_confirm() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="confirm:yes")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",    callback_data="confirm:no")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back:amount")],
    ])

def kb_open_incidents(open_list) -> InlineKeyboardMarkup:
    rows=[]
    for rec in open_list:
        title = f"#{rec['id']} ‚Ä¢ {rec['restaurant']} ‚Ä¢ {rec['reason']} ‚Ä¢ {rec['amount_kzt']}‚Ç∏"
        rows.append([InlineKeyboardButton(text=title, callback_data=f"pick:{rec['id']}")])
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back:main")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def kb_confirm_close(incident_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, –∑–∞–∫—Ä—ã—Ç—å", callback_data=f"close_yes:{incident_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="back:main")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back:close_time:{incident_id}")],
    ])

# ====== /start ======
@router.message(F.text == "/start")
async def on_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —É—á—ë—Ç–∞ –ø–æ—Ç–µ—Ä—å –ø—Ä–æ–¥–∞–∂.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ.",
        reply_markup=main_kb,
    )

# ====== –ò–Ω—Ü–∏–¥–µ–Ω—Ç: —à–∞–≥–∏ ======
@router.message(F.text == BTN_INCIDENT)
async def inc_start(message: Message, state: FSMContext):
    # —à–∞–≥ 1: –≤—ã–±—Ä–∞—Ç—å —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ
    managers = await db.get_managers()
    if not managers:
        await message.answer("–í –ë–î –Ω–µ—Ç —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö.")
        return
    items = [(f"üë§ {m['name']}", f"mgr:{m['id']}") for m in managers]
    await state.set_state(IncidentFSM.manager)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ:", reply_markup=kb_list(items, back="back:main"))

@router.callback_query(IncidentFSM.manager, F.data.startswith("mgr:"))
async def inc_pick_manager(cb: CallbackQuery, state: FSMContext):
    mgr_id = int(cb.data.split(":")[1])
    await state.update_data(manager_id=mgr_id)

    # —à–∞–≥ 2: —Ä–µ—Å—Ç–æ—Ä–∞–Ω
    rests = await db.get_restaurants_for_manager(mgr_id)
    if not rests:
        await cb.message.edit_text("–£ —ç—Ç–æ–≥–æ —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤.", reply_markup=kb_back_next("back:main"))
        await cb.answer()
        return
    items = [(f"üçó {r['name']}", f"rest:{r['id']}") for r in rests]
    await state.set_state(IncidentFSM.restaurant)
    await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω:", reply_markup=kb_list(items, back="back:manager"))
    await cb.answer()

@router.callback_query(F.data=="back:manager")
async def back_to_manager(cb: CallbackQuery, state:FSMContext):
    managers = await db.get_managers()
    items = [(f"üë§ {m['name']}", f"mgr:{m['id']}") for m in managers]
    await state.set_state(IncidentFSM.manager)
    await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ:", reply_markup=kb_list(items, back="back:main"))
    await cb.answer()

@router.callback_query(IncidentFSM.restaurant, F.data.startswith("rest:"))
async def inc_pick_rest(cb: CallbackQuery, state:FSMContext):
    r_id = int(cb.data.split(":")[1])
    await state.update_data(restaurant_id=r_id)
    await state.set_state(IncidentFSM.day)
    await cb.message.edit_text("–î–µ–Ω—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞:", reply_markup=kb_days())
    await cb.answer()

@router.callback_query(F.data=="back:restaurant")
async def back_to_rest(cb:CallbackQuery, state:FSMContext):
    data = await state.get_data()
    mgr_id = data.get("manager_id")
    rests = await db.get_restaurants_for_manager(mgr_id)
    items = [(f"üçó {r['name']}", f"rest:{r['id']}") for r in rests]
    await state.set_state(IncidentFSM.restaurant)
    await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω:", reply_markup=kb_list(items, back="back:manager"))
    await cb.answer()

@router.callback_query(IncidentFSM.day, F.data.startswith("day:"))
async def inc_pick_day(cb:CallbackQuery, state:FSMContext):
    day_iso = cb.data.split(":",1)[1]
    await state.update_data(day=day_iso)
    await state.set_state(IncidentFSM.start_hour)
    await cb.message.edit_text("–ß–∞—Å –Ω–∞—á–∞–ª–∞ (0‚Äì23):", reply_markup=kb_hours("sh", "back:restaurant"))
    await cb.answer()

@router.callback_query(F.data=="back:start_hour")
async def back_to_start_hour(cb:CallbackQuery, state:FSMContext):
    await state.set_state(IncidentFSM.start_hour)
    await cb.message.edit_text("–ß–∞—Å –Ω–∞—á–∞–ª–∞ (0‚Äì23):", reply_markup=kb_hours("sh", "back:restaurant"))
    await cb.answer()

@router.callback_query(IncidentFSM.start_hour, F.data.startswith("sh:"))
async def inc_pick_start_hour(cb:CallbackQuery, state:FSMContext):
    h = cb.data.split(":")[1]
    await state.update_data(start_hour=h)
    await state.set_state(IncidentFSM.start_minute)
    await cb.message.edit_text("–ú–∏–Ω—É—Ç—ã –Ω–∞—á–∞–ª–∞:", reply_markup=kb_minutes("sm", "back:start_hour"))
    await cb.answer()

@router.callback_query(IncidentFSM.start_minute, F.data.startswith("sm:"))
async def inc_pick_start_minute(cb:CallbackQuery, state:FSMContext):
    m = cb.data.split(":")[1]
    await state.update_data(start_minute=m)
    await state.set_state(IncidentFSM.end_choice)
    await cb.message.edit_text("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ:", reply_markup=kb_end_choice())
    await cb.answer()

@router.callback_query(F.data=="back:start_minute")
async def back_to_start_minute(cb:CallbackQuery, state:FSMContext):
    await state.set_state(IncidentFSM.start_minute)
    await cb.message.edit_text("–ú–∏–Ω—É—Ç—ã –Ω–∞—á–∞–ª–∞:", reply_markup=kb_minutes("sm", "back:start_hour"))
    await cb.answer()

@router.callback_query(IncidentFSM.end_choice, F.data=="end:now")
async def end_now(cb:CallbackQuery, state:FSMContext):
    await state.update_data(end_now=True)
    await state.set_state(IncidentFSM.reason)
    await cb.message.edit_text("–ü—Ä–∏—á–∏–Ω–∞ –ø–æ—Ç–µ—Ä—å:", reply_markup=kb_reasons())
    await cb.answer()

@router.callback_query(IncidentFSM.end_choice, F.data=="end:later")
async def end_later(cb:CallbackQuery, state:FSMContext):
    await state.update_data(end_now=False)
    await state.set_state(IncidentFSM.reason)
    await cb.message.edit_text("–ü—Ä–∏—á–∏–Ω–∞ –ø–æ—Ç–µ—Ä—å:", reply_markup=kb_reasons())
    await cb.answer()

@router.callback_query(F.data=="back:end_choice")
async def back_to_end_choice(cb:CallbackQuery, state:FSMContext):
    await state.set_state(IncidentFSM.end_choice)
    await cb.message.edit_text("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ:", reply_markup=kb_end_choice())
    await cb.answer()

@router.callback_query(IncidentFSM.reason, F.data.startswith("reason:"))
async def pick_reason(cb:CallbackQuery, state:FSMContext):
    val = cb.data.split(":")[1]
    await state.update_data(reason=val)
    await state.set_state(IncidentFSM.comment)
    await cb.message.edit_text("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç) –∏–ª–∏ ¬´‚Äî¬ª.", reply_markup=kb_back_next("back:reason"))
    await cb.answer()

@router.message(IncidentFSM.comment, F.text)
async def comment_entered(msg:Message, state:FSMContext):
    text = msg.text.strip()
    if not text:
        text = "‚Äî"
    await state.update_data(comment=text)
    await state.set_state(IncidentFSM.amount)
    await msg.answer("üí∏ –°—É–º–º–∞, KZT:", reply_markup=kb_amounts())

@router.callback_query(IncidentFSM.amount, F.data.startswith("amount:"))
async def pick_amount(cb:CallbackQuery, state:FSMContext):
    raw = cb.data.split(":")[1]
    if raw == "–î—Ä—É–≥–∞—è":
        await cb.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º (—Ç–µ–Ω–≥–µ):", reply_markup=kb_back_next("back:reason"))
        await state.set_state(IncidentFSM.amount)  # –æ—Å—Ç–∞—ë–º—Å—è –≤ —ç—Ç–æ–º —Å—Ç–µ–π—Ç–µ, –∂–¥—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await cb.answer()
        return
    await state.update_data(amount=int(raw))
    await show_confirm(cb.message, state)
    await state.set_state(IncidentFSM.confirm)
    await cb.answer()

@router.message(IncidentFSM.amount, F.text.regexp(r"^\d+$"))
async def amount_other(msg:Message, state:FSMContext):
    await state.update_data(amount=int(msg.text))
    await show_confirm(msg, state)
    await state.set_state(IncidentFSM.confirm)

async def show_confirm(target, state:FSMContext):
    data = await state.get_data()
    day = dt.date.fromisoformat(data["day"])
    start = tz.localize(dt.datetime.combine(day, dt.time(int(data["start_hour"]), int(data["start_minute"]))))
    end_now = data.get("end_now", False)

    end_str = "‚Äî"
    dur_str = "‚Äî"
    if end_now:
        end_ts = dt.datetime.now(tz)
        end_str = end_ts.strftime("%d.%m %H:%M")
        minutes = int((end_ts - start).total_seconds() // 60)
        dur_str = f"{minutes} –º–∏–Ω"

    # —á–∏—Ç–∞–µ–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    reason_label = next((lbl for lbl,val in REASONS if val==data["reason"]), data["reason"])

    text = (
        "<b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ</b>\n"
        f"–¢–£: –≤—ã–±—Ä–∞–Ω–æ ID {data['manager_id']}\n"
        f"–†–µ—Å—Ç–æ—Ä–∞–Ω: ID {data['restaurant_id']}\n"
        f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {start.strftime('%d.%m %H:%M')}\n"
        f"–í—Ä–µ–º—è –∫–æ–Ω—Ü–∞: {end_str}\n"
        f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {dur_str}\n"
        f"–ü—Ä–∏—á–∏–Ω–∞: {reason_label}\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data['comment']}\n"
        f"–°—É–º–º–∞: {data['amount']:,} ‚Ç∏".replace(",", " ")
    )
    await target.answer(text, reply_markup=kb_confirm())

@router.callback_query(IncidentFSM.confirm, F.data.startswith("confirm:"))
async def confirm_create(cb:CallbackQuery, state:FSMContext):
    if cb.data == "confirm:no":
        await state.clear()
        await cb.message.edit_text("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)
        await cb.answer()
        return

    # —Å–æ–±–∏—Ä–∞–µ–º –∏ –ø–∏—à–µ–º –≤ –ë–î
    data = await state.get_data()
    day = dt.date.fromisoformat(data["day"])
    start_ts = tz.localize(dt.datetime.combine(day, dt.time(int(data["start_hour"]), int(data["start_minute"]))))

    end_ts = None
    status = "open"
    if data.get("end_now"):
        end_ts = dt.datetime.now(tz)
        status = "closed"

    incident_id = await db.insert_incident(
        manager_id=int(data["manager_id"]),
        restaurant_id=int(data["restaurant_id"]),
        start_ts=start_ts,
        end_ts=end_ts,
        reason=data["reason"],
        comment=data["comment"],
        amount_kzt=int(data["amount"]),
        status=status,
    )
    await state.clear()
    if status == "open":
        await cb.message.edit_text(f"–ò–Ω—Ü–∏–¥–µ–Ω—Ç #{incident_id} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ –û–¢–ö–†–´–¢–´–ô.", reply_markup=None)
    else:
        await cb.message.edit_text(f"–ò–Ω—Ü–∏–¥–µ–Ω—Ç #{incident_id} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –ó–ê–ö–†–´–¢.", reply_markup=None)
    await cb.answer()

# ====== –ó–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∂–µ ======
@router.message(F.text == BTN_CLOSE)
async def on_close_entry(msg:Message, state:FSMContext):
    opens = await db.list_open_incidents()
    if not opens:
        await msg.answer("–û—Ç–∫—Ä—ã—Ç—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –Ω–µ—Ç.", reply_markup=main_kb)
        return
    await state.set_state(CloseLaterFSM.pick_incident)
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—ã–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç:", reply_markup=kb_open_incidents(opens))

@router.callback_query(CloseLaterFSM.pick_incident, F.data.startswith("pick:"))
async def pick_open(cb:CallbackQuery, state:FSMContext):
    inc_id = int(cb.data.split(":")[1])
    await state.update_data(incident_id=inc_id)
    await state.set_state(CloseLaterFSM.day)
    await cb.message.edit_text("–î–µ–Ω—å –æ–∫–æ–Ω—á–∞–Ω–∏—è:", reply_markup=kb_days())
    await cb.answer()

@router.callback_query(CloseLaterFSM.day, F.data.startswith("day:"))
async def close_pick_day(cb:CallbackQuery, state:FSMContext):
    day_iso = cb.data.split(":",1)[1]
    await state.update_data(day=day_iso)
    await state.set_state(CloseLaterFSM.end_hour)
    await cb.message.edit_text("–ß–∞—Å –∫–æ–Ω—Ü–∞:", reply_markup=kb_hours("eh", "back:main"))
    await cb.answer()

@router.callback_query(CloseLaterFSM.end_hour, F.data.startswith("eh:"))
async def close_pick_hour(cb:CallbackQuery, state:FSMContext):
    h = cb.data.split(":")[1]
    await state.update_data(end_hour=h)
    await state.set_state(CloseLaterFSM.end_minute)
    await cb.message.edit_text("–ú–∏–Ω—É—Ç—ã –∫–æ–Ω—Ü–∞:", reply_markup=kb_minutes("em", "back:main"))
    await cb.answer()

@router.callback_query(CloseLaterFSM.end_minute, F.data.startswith("em:"))
async def close_pick_min(cb:CallbackQuery, state:FSMContext):
    m = cb.data.split(":")[1]
    await state.update_data(end_minute=m)
    data = await state.get_data()
    day = dt.date.fromisoformat(data["day"])
    end_ts = tz.localize(dt.datetime.combine(day, dt.time(int(data["end_hour"]), int(m))))
    await state.set_state(CloseLaterFSM.confirm)
    text = f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫—Ä—ã—Ç–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ #{data['incident_id']} –≤—Ä–µ–º–µ–Ω–µ–º {end_ts.strftime('%d.%m %H:%M')}?"
    await cb.message.edit_text(text, reply_markup=kb_confirm_close(data['incident_id']))
    await cb.answer()

@router.callback_query(CloseLaterFSM.confirm, F.data.startswith("close_yes:"))
async def do_close(cb:CallbackQuery, state:FSMContext):
    inc_id = int(cb.data.split(":")[1])
    data = await state.get_data()
    day = dt.date.fromisoformat(data["day"])
    end_ts = tz.localize(dt.datetime.combine(day, dt.time(int(data["end_hour"]), int(data["end_minute"]))))
    await db.close_incident(inc_id, end_ts)
    await state.clear()
    await cb.message.edit_text(f"–ò–Ω—Ü–∏–¥–µ–Ω—Ç #{inc_id} –∑–∞–∫—Ä—ã—Ç.", reply_markup=None)
    await cb.answer()

# ====== –û—Ç—á—ë—Ç (–∑–∞–≥–ª—É—à–∫–∞-–º–µ–Ω—é) ======
@router.message(F.text == BTN_REPORT)
async def on_report(msg:Message, state:FSMContext):
    await state.clear()
    await msg.answer("–í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç—á—ë—Ç–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ (PDF/Excel).", reply_markup=main_kb)

# ====== fallback ======
@router.message()
async def fallback(message: Message):
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É: ¬´–ò–Ω—Ü–∏–¥–µ–Ω—Ç¬ª, ¬´–ó–∞–∫—Ä—ã—Ç—å¬ª –∏–ª–∏ ¬´–û—Ç—á—ë—Ç¬ª.", reply_markup=main_kb)
