# bot.py
import os
import asyncio
import datetime as dt
from zoneinfo import ZoneInfo

from aiogram import Bot, Dispatcher, Router, F, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

from db import (
    fetch_managers,
    fetch_restaurants_for_manager,
    insert_incident,
    list_open_incidents,
    close_incident,
)

# --- –±–∞–∑–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã
BOT_TOKEN = os.environ["BOT_TOKEN"]
TZ = ZoneInfo(os.environ.get("TZ", "Asia/Almaty"))

bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
router = Router(name="main")
dp.include_router(router)

# --- –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üÜï –ò–Ω—Ü–∏–¥–µ–Ω—Ç")],
        [KeyboardButton(text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å")],
        [KeyboardButton(text="üìä –û—Ç—á—ë—Ç")],
    ],
    resize_keyboard=True,
)

# ====== FSM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ ======
class IncidentFSM(StatesGroup):
    manager = State()
    restaurant = State()
    day = State()
    hour = State()
    minute = State()
    reason = State()
    comment = State()
    amount = State()
    confirm = State()

REASONS = [
    ("üå© –í–Ω–µ—à–Ω–∏–µ –ø–æ—Ç–µ—Ä–∏", "external"),
    ("üè≠ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø–æ—Ç–µ—Ä–∏", "internal"),
    ("üë• –ù–µ—Ö–≤–∞—Ç–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞", "staff_shortage"),
    ("üö´ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞", "no_product"),
]

AMOUNTS = [10_000, 25_000, 50_000, 100_000, 250_000, 500_000, 1_000_000]

def date_options():
    today = dt.datetime.now(TZ).date()
    days = [today, today - dt.timedelta(days=1)]
    # –µ—â—ë 6 –¥–∞—Ç –Ω–∞–∑–∞–¥, —á—Ç–æ–±—ã –≤—Å–µ–≥–æ –±—ã–ª–æ 8 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (—Å–µ–≥–æ–¥–Ω—è+–≤—á–µ—Ä–∞+6 –¥–∞—Ç)
    for i in range(2, 8):
        days.append(today - dt.timedelta(days=i))
    # –ü–æ–∫–∞–∂–µ–º –∫–Ω–æ–ø–∫–∞–º–∏ ¬´–°–µ–≥–æ–¥–Ω—è¬ª, ¬´–í—á–µ—Ä–∞¬ª –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã
    buttons = [
        [InlineKeyboardButton(text="üìÜ –°–µ–≥–æ–¥–Ω—è", callback_data=f"day:{today.isoformat()}")],
        [InlineKeyboardButton(text="üìÜ –í—á–µ—Ä–∞", callback_data=f"day:{(today-dt.timedelta(days=1)).isoformat()}")],
    ]
    for d in days[2:]:
        buttons.append([InlineKeyboardButton(text=f"üìÜ {d.isoformat()}", callback_data=f"day:{d.isoformat()}")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def hour_kb():
    rows, row = [], []
    for h in range(24):
        row.append(InlineKeyboardButton(text=f"{h:02d}", callback_data=f"hour:{h}"))
        if len(row) == 6:
            rows.append(row); row = []
    if row: rows.append(row)
    return InlineKeyboardMarkup(inline_keyboard=rows)

def minute_kb():
    options = [0, 15, 30, 45]
    row = [InlineKeyboardButton(text=f"{m:02d}", callback_data=f"min:{m}") for m in options]
    return InlineKeyboardMarkup(inline_keyboard=[row])

def back_cancel_kb():
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="nav:back"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="nav:cancel"),
    ]])

def reasons_kb():
    rows = [[InlineKeyboardButton(text=title, callback_data=f"reason:{code}") ] for title,code in REASONS]
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="nav:back")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def amounts_kb():
    rows = []
    row=[]
    for a in AMOUNTS:
        row.append(InlineKeyboardButton(text=f"{a:,}".replace(",", " "), callback_data=f"amt:{a}"))
        if len(row)==3:
            rows.append(row); row=[]
    if row: rows.append(row)
    rows.append([InlineKeyboardButton(text="üßÆ –î—Ä—É–≥–∞—è —Å—É–º–º–∞", callback_data="amt:other")])
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="nav:back")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def yes_no_kb():
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚úÖ –î–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="confirm:yes"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm:no"),
    ]])

# --------- —Å—Ç–∞—Ä—Ç ----------
@router.message(CommandStart())
async def cmd_start(m: types.Message, state: FSMContext):
    await state.clear()
    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —É—á—ë—Ç–∞ –ø–æ—Ç–µ—Ä—å –ø—Ä–æ–¥–∞–∂.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ.",
        reply_markup=main_kb,
    )

# ========= –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ =========
@router.message(F.text == "üÜï –ò–Ω—Ü–∏–¥–µ–Ω—Ç")
async def start_incident(m: types.Message, state: FSMContext):
    await state.clear()
    managers = await fetch_managers()
    if not managers:
        await m.answer("–í –±–∞–∑–µ –Ω–µ—Ç —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö.")
        return
    # —Å–¥–µ–ª–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    rows, row = [], []
    for mid, name in managers:
        row.append(InlineKeyboardButton(text=f"üë§ {name}", callback_data=f"mgr:{mid}"))
        if len(row) == 2:
            rows.append(row); row=[]
    if row: rows.append(row)
    rows.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="nav:cancel")])
    kb = InlineKeyboardMarkup(inline_keyboard=rows)
    await m.answer("üë§ –í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ:", reply_markup=kb)
    await state.set_state(IncidentFSM.manager)

@router.callback_query(IncidentFSM.manager, F.data.startswith("mgr:"))
async def choose_manager(c: types.CallbackQuery, state: FSMContext):
    manager_id = int(c.data.split(":")[1])
    await state.update_data(manager_id=manager_id)
    # —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã
    rest = await fetch_restaurants_for_manager(manager_id)
    if not rest:
        await c.message.edit_text("–£ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤.")
        await c.answer()
        return
    rows, row = [], []
    for rid, name in rest:
        row.append(InlineKeyboardButton(text=f"üçó {name}", callback_data=f"rst:{rid}"))
        if len(row) == 2:
            rows.append(row); row=[]
    if row: rows.append(row)
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="nav:back"),
                 InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="nav:cancel")])
    await c.message.edit_text("üçó –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω:", reply_markup=InlineKeyboardMarkup(inline_keyboard=rows))
    await state.set_state(IncidentFSM.restaurant)
    await c.answer()

@router.callback_query(IncidentFSM.restaurant, F.data == "nav:back")
async def back_to_manager(c: types.CallbackQuery, state: FSMContext):
    # –≤–µ—Ä–Ω—ë–º—Å—è –∫ —Å–ø–∏—Å–∫—É —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö
    managers = await fetch_managers()
    rows, row = [], []
    for mid, name in managers:
        row.append(InlineKeyboardButton(text=f"üë§ {name}", callback_data=f"mgr:{mid}"))
        if len(row) == 2:
            rows.append(row); row=[]
    if row: rows.append(row)
    rows.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="nav:cancel")])
    await c.message.edit_text("üë§ –í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ:", reply_markup=InlineKeyboardMarkup(inline_keyboard=rows))
    await state.set_state(IncidentFSM.manager)
    await c.answer()

@router.callback_query(IncidentFSM.restaurant, F.data.startswith("rst:"))
async def choose_restaurant(c: types.CallbackQuery, state: FSMContext):
    restaurant_id = int(c.data.split(":")[1])
    await state.update_data(restaurant_id=restaurant_id)
    await c.message.edit_text("üóì –í—ã–±–µ—Ä–∏—Ç–µ <b>–¥–µ–Ω—å –Ω–∞—á–∞–ª–∞</b>:", reply_markup=date_options())
    await state.set_state(IncidentFSM.day)
    await c.answer()

@router.callback_query(IncidentFSM.day, F.data.startswith("day:"))
async def set_day(c: types.CallbackQuery, state: FSMContext):
    day = dt.date.fromisoformat(c.data.split(":")[1])
    await state.update_data(day=day)
    await c.message.edit_text("‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ <b>—á–∞—Å –Ω–∞—á–∞–ª–∞</b>:", reply_markup=hour_kb())
    await state.set_state(IncidentFSM.hour)
    await c.answer()

@router.callback_query(IncidentFSM.hour, F.data.startswith("hour:"))
async def set_hour(c: types.CallbackQuery, state: FSMContext):
    hour = int(c.data.split(":")[1])
    await state.update_data(hour=hour)
    await c.message.edit_text("üïí –í—ã–±–µ—Ä–∏—Ç–µ <b>–º–∏–Ω—É—Ç—ã</b>:", reply_markup=minute_kb())
    await state.set_state(IncidentFSM.minute)
    await c.answer()

@router.callback_query(IncidentFSM.minute, F.data.startswith("min:"))
async def set_minute(c: types.CallbackQuery, state: FSMContext):
    minute = int(c.data.split(":")[1])
    await state.update_data(minute=minute)
    await c.message.edit_text("üóÇÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ <b>–ø—Ä–∏—á–∏–Ω—É</b>:", reply_markup=reasons_kb())
    await state.set_state(IncidentFSM.reason)
    await c.answer()

@router.callback_query(IncidentFSM.reason, F.data.startswith("reason:"))
async def choose_reason(c: types.CallbackQuery, state: FSMContext):
    reason = c.data.split(":")[1]
    await state.update_data(reason=reason)
    await c.message.edit_text("üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ¬´‚Äî¬ª", reply_markup=None)
    await state.set_state(IncidentFSM.comment)
    await c.answer()

@router.message(IncidentFSM.comment)
async def get_comment(m: types.Message, state: FSMContext):
    comment = m.text.strip()
    await state.update_data(comment=comment)
    await m.answer("üí∏ –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É (KZT) –∏–ª–∏ ¬´–î—Ä—É–≥–∞—è —Å—É–º–º–∞¬ª:", reply_markup=amounts_kb())

    await state.set_state(IncidentFSM.amount)

@router.callback_query(IncidentFSM.amount, F.data.startswith("amt:"))
async def choose_amount(c: types.CallbackQuery, state: FSMContext):
    _, val = c.data.split(":")
    if val == "other":
        await c.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º, –±–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π:")
        await c.answer()
        return
    amount = int(val)
    await state.update_data(amount=amount)
    await show_confirm(c.message, state)
    await state.set_state(IncidentFSM.confirm)
    await c.answer()

@router.message(IncidentFSM.amount)
async def other_amount(m: types.Message, state: FSMContext):
    # –ø–∞—Ä—Å–∏–º —á–∏—Å–ª–æ
    txt = m.text.replace(" ", "").replace(",", "")
    if not txt.isdigit():
        await m.answer("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return
    await state.update_data(amount=int(txt))
    await show_confirm(m, state)
    await state.set_state(IncidentFSM.confirm)

async def show_confirm(target_message: types.Message | types.Message, state: FSMContext):
    data = await state.get_data()
    day: dt.date = data["day"]
    hour: int = data["hour"]
    minute: int = data["minute"]
    start_dt = dt.datetime(day.year, day.month, day.day, hour, minute, tzinfo=TZ)
    reason = data["reason"]
    comment = data["comment"]
    amount = data["amount"]

    # –ø—Ä–æ—Å—Ç–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
    text = (
        "<b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ</b>\n"
        f"–¢–£ (ID): <code>{data['manager_id']}</code>\n"
        f"–†–µ—Å—Ç–æ—Ä–∞–Ω (ID): <code>{data['restaurant_id']}</code>\n"
        f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: <code>{start_dt:%Y-%m-%d %H:%M}</code>\n"
        f"–ü—Ä–∏—á–∏–Ω–∞: <code>{reason}</code>\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n"
        f"–°—É–º–º–∞: <b>{amount:,}</b> KZT".replace(",", " ")
    )
    await target_message.answer(text, reply_markup=yes_no_kb())

@router.callback_query(IncidentFSM.confirm, F.data == "confirm:yes")
async def do_save(c: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    day: dt.date = data["day"]
    hour: int = data["hour"]
    minute: int = data["minute"]
    start_dt = dt.datetime(day.year, day.month, day.day, hour, minute, tzinfo=TZ)

    inc_id = await insert_incident(
        manager_id=data["manager_id"],
        restaurant_id=data["restaurant_id"],
        start_ts=start_dt,
        end_ts=None,
        reason=data["reason"],
        comment=data["comment"],
        amount=data["amount"],
    )
    await state.clear()
    await c.message.edit_text(f"‚úÖ –ò–Ω—Ü–∏–¥–µ–Ω—Ç <b>#{inc_id}</b> —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –°—Ç–∞—Ç—É—Å: <code>open</code>.", reply_markup=None)
    await c.answer()

@router.callback_query(IncidentFSM.confirm, F.data.in_(["confirm:no", "nav:cancel"]))
async def cancel_create(c: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await c.message.edit_text("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)
    await c.answer()

# ========= –ó–∞–∫—Ä—ã—Ç–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ =========
@router.message(F.text == "‚úÖ –ó–∞–∫—Ä—ã—Ç—å")
async def close_menu(m: types.Message, state: FSMContext):
    await state.clear()
    items = await list_open_incidents()
    if not items:
        await m.answer("–û—Ç–∫—Ä—ã—Ç—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –Ω–µ—Ç.")
        return
    rows = []
    for it in items:
        caption = f"#{it['id']} ‚Ä¢ {it['restaurant']} ‚Ä¢ {it['start_time']:%m-%d %H:%M} ‚Ä¢ {it['reason']} ‚Ä¢ {it['amount']}"
        rows.append([InlineKeyboardButton(text=caption, callback_data=f"close:{it['id']}")])
    kb = InlineKeyboardMarkup(inline_keyboard=rows)
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è (–≤—Ä–µ–º—è –∫–æ–Ω—Ü–∞ –±—É–¥–µ—Ç ¬´—Å–µ–π—á–∞—Å¬ª):", reply_markup=kb)

@router.callback_query(F.data.startswith("close:"))
async def do_close_now(c: types.CallbackQuery):
    inc_id = int(c.data.split(":")[1])
    now_ts = dt.datetime.now(TZ)
    await close_incident(inc_id, now_ts)
    await c.message.edit_text(f"‚úÖ –ò–Ω—Ü–∏–¥–µ–Ω—Ç #{inc_id} –∑–∞–∫—Ä—ã—Ç –≤ {now_ts:%Y-%m-%d %H:%M}.")
    await c.answer()

# ========= –û—Ç—á—ë—Ç (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞) =========
@router.message(F.text == "üìä –û—Ç—á—ë—Ç")
async def report_stub(m: types.Message):
    await m.answer("–í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç—á—ë—Ç–∞‚Ä¶ (–ø–æ–∑–∂–µ –¥–æ–±–∞–≤–∏–º PDF/Excel).")
