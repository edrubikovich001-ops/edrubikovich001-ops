# bot.py ‚Äî aiogram v3.x
import os
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import (
    Message, CallbackQuery,
    ReplyKeyboardMarkup, KeyboardButton
)
from aiogram.filters import CommandStart

# === –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∫–æ–Ω—Ñ–∏–≥ ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")

router = Router()
dp = Dispatcher()
dp.include_router(router)

# === –¢–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫: –ø—Ä–∏—ë–º –∏ —Å —ç–º–æ–¥–∑–∏ –∏ –±–µ–∑ ===
INCIDENT_BTN_TXT = {"–ò–Ω—Ü–∏–¥–µ–Ω—Ç", "üÜï –ò–Ω—Ü–∏–¥–µ–Ω—Ç"}
CLOSE_BTN_TXT    = {"–ó–∞–∫—Ä—ã—Ç—å", "‚úÖ –ó–∞–∫—Ä—ã—Ç—å"}
REPORT_BTN_TXT   = {"–û—Ç—á—ë—Ç", "üìä –û—Ç—á—ë—Ç"}

def main_menu_kb() -> ReplyKeyboardMarkup:
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–µ –ø–æ–¥–ø–∏—Å–∏ (—Å —ç–º–æ–¥–∑–∏),
    # –Ω–æ —Ö–µ–Ω–¥–ª–µ—Ä—ã –ø—Ä–∏–º—É—Ç –∏ –±–µ–∑ —ç–º–æ–¥–∑–∏.
    rows = [
        [KeyboardButton(text="üÜï –ò–Ω—Ü–∏–¥–µ–Ω—Ç")],
        [KeyboardButton(text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å")],
        [KeyboardButton(text="üìä –û—Ç—á—ë—Ç")],
    ]
    return ReplyKeyboardMarkup(
        keyboard=rows,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ‚Ä¶"
    )

# === –•–µ–Ω–¥–ª–µ—Ä—ã ===
@router.message(CommandStart())
async def on_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —É—á—ë—Ç–∞ –ø–æ—Ç–µ—Ä—å –ø—Ä–æ–¥–∞–∂.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ.",
        reply_markup=main_menu_kb(),
    )

# –ò–Ω—Ü–∏–¥–µ–Ω—Ç ‚Äî –ø—Ä–∏–Ω–∏–º–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–µ–∫—Å—Ç–∞ —Å/–±–µ–∑ —ç–º–æ–¥–∑–∏
@router.message(F.text.in_(INCIDENT_BTN_TXT))
async def on_incident(message: Message):
    await message.answer("–û–∫–µ–π, –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞‚Ä¶ (–∑–∞–≥–ª—É—à–∫–∞)")

# –ó–∞–∫—Ä—ã—Ç—å ‚Äî –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å/–±–µ–∑ —ç–º–æ–¥–∑–∏
@router.message(F.text.in_(CLOSE_BTN_TXT))
async def on_close(message: Message):
    await message.answer("–ó–∞–∫—Ä—ã—Ç–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞‚Ä¶ (–∑–∞–≥–ª—É—à–∫–∞)")

# –û—Ç—á—ë—Ç ‚Äî –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å/–±–µ–∑ —ç–º–æ–¥–∑–∏
@router.message(F.text.in_(REPORT_BTN_TXT))
async def on_report(message: Message):
    await message.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞‚Ä¶ (–∑–∞–≥–ª—É—à–∫–∞)")

# –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π: —ç—Ö–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message(F.text)
async def fallback(message: Message):
    await message.answer(
        f"–Ø –ø–æ–Ω—è–ª: ¬´{message.text}¬ª.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ.",
        reply_markup=main_menu_kb(),
    )
